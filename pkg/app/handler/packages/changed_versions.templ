// SPDX-License-Identifier: GPL-2.0-only
package packages

import (
	"net/http"
	"strings"

	"soko/pkg/app/handler/categories"
	"soko/pkg/app/handler/feeds"
	"soko/pkg/app/handler/packages/components"
	"soko/pkg/app/utils"
	"soko/pkg/database"
	"soko/pkg/models"
)

templ changedVersionsPage(pageType string, versions []*models.Version) {
	<div class="container mb-5">
		<div class="row">
			<div class="col-12">
				<h3 class="mb-2" style="text-transform: capitalize;">
					{ pageType } Packages
					<a
						title="Atom feed"
						class="kk-feed-icon"
						href={ templ.URL("/packages/" + pageType + ".atom") }
					>
						<span class="fa fa-fw fa-rss-square"></span>
					</a>
				</h3>
				<li class="list-group rounded">
					@utils.ChangedVersionsTable(versions)
				</li>
			</div>
		</div>
	</div>
}

// Added renders a template containing a list of 50 recently added versions.
func Added(w http.ResponseWriter, r *http.Request) {
	addedVersions := GetAddedVersions(50)
	categories.RenderPage(w, r, "Added Packages", "Added", changedVersionsPage("added", addedVersions))
}

func AddedFeed(w http.ResponseWriter, r *http.Request) {
	addedPackages := GetAddedPackages(250)
	feeds.AddedPackages("Added packages in Gentoo.", "Added packages in Gentoo.", addedPackages, w)
}

// Updated renders a template containing
// a list of 50 recently updated versions
func Updated(w http.ResponseWriter, r *http.Request) {
	updatedVersions := GetUpdatedVersions(50)
	categories.RenderPage(w, r, "Updated Packages", "Updated", changedVersionsPage("updated", updatedVersions))
}

func UpdatedFeed(w http.ResponseWriter, r *http.Request) {
	updatedVersions := GetUpdatedVersions(250)
	feeds.Changes("Added packages in Gentoo.", "Added packages in Gentoo.", updatedVersions, w)
}

// Stabilized renders a template containing
// a list of 50 recently stabilized versions
func Stabilized(w http.ResponseWriter, r *http.Request) {
	stabilizedVersions := GetStabilizedVersions(50)
	categories.RenderPage(w, r, "Stabilized Packages", "Newly Stable", changedVersionsPage("stabilized", stabilizedVersions))
}

func StabilizedFeed(w http.ResponseWriter, r *http.Request) {
	stabilizedVersions := GetStabilizedVersions(250)
	feeds.Changes("Stabilized packages in Gentoo.", "Stabilized packages in Gentoo.", stabilizedVersions, w)
}

// Keyworded renders a template containing
// a list of 50 recently keyworded versions
func Keyworded(w http.ResponseWriter, r *http.Request) {
	keywordedVersions := GetKeywordedVersions(50)
	categories.RenderPage(w, r, "Keyworded Packages", "Keyworded", changedVersionsPage("keyworded", keywordedVersions))
}

func KeywordedFeed(w http.ResponseWriter, r *http.Request) {
	keywordedVersions := GetKeywordedVersions(250)
	feeds.Changes("Keyworded packages in Gentoo.", "Keyworded packages in Gentoo.", keywordedVersions, w)
}

templ allStableRequests(results []*models.PkgCheckResult) {
	<div class="container mb-5">
		@components.Stabilizations(results)
	</div>
}

func AllStableRequests(w http.ResponseWriter, r *http.Request) {
	var results []*models.PkgCheckResult
	err := database.DBCon.Model(&results).
		Column("atom", "cpv", "message").
		Where("class = ?", "StableRequest").
		OrderExpr(`substring(message,' \d+ ')::INT DESC`).
		Select()
	if err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	categories.RenderPage(w, r, "All Stable Requests", "Stable Requests", allStableRequests(results))
}

func AllStableRequestsFile(w http.ResponseWriter, r *http.Request) {
	var results []*models.PkgCheckResult
	err := database.DBCon.Model(&results).
		Column("category", "package", "version", "message").
		Where("class = ?", "StableRequest").
		OrderExpr(`substring(message,' \d+ ')::INT DESC`).
		Select()
	if err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	pageName := r.URL.Path[strings.LastIndexByte(r.URL.Path, '/')+1:]
	utils.StabilizationExport(w, pageName, results)
}

func AllStableRequestsFeed(w http.ResponseWriter, r *http.Request) {
	var results []*models.PkgCheckResult
	err := database.DBCon.Model(&results).
		Column("atom", "cpv", "message").
		Where("class = ?", "StableRequest").
		OrderExpr(`substring(message,' \d+ ')::INT DESC`).
		Select()
	if err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	utils.StabilizationFeed(w, "https://packages.gentoo.org/packages/stabilization", "All Stable Requests", results)
}
